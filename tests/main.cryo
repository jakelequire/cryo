namespace test;
// import std::Math;

extern function printInt(integer: int) -> void;
extern function printStr(str: string) -> void;
extern function strLength(stri: string) -> int;

public function getStringLength() -> void {
    const testStrLength: int = strLength("strTest");
    printStr("String length:");
    printInt(testStrLength);
    return;
}

public function test(numberIterator: int) -> void {
    const pleasework: int = numberIterator + 1;
    const intArrTwo: int[] = [101, 102, 103, 104, 105, 106, 107, 108, 109, 110];
    //                         0    1    2    3    4    5    6    7    8    9
    const indexArrNew: int = intArrTwo[numberIterator];

    printStr("----------");
    printStr("Param value: ");
    printInt(numberIterator);

    printStr("Array value: ");
    printInt(indexArrNew);

    printStr("----------");
    printStr(" ");

    if(pleasework < 5) {
        test(pleasework);
    } else {
        return;
    }
    return;
}


public function add(a: int, b: int) -> int {
    return a + b;
}

public function subtract(a: int, b: int) -> int {
    return a - b;
}

public function multiply(a: int, b: int) -> int {
    return a * b;
}

public function divide(a: int, b: int) -> int {
    return a / b;
}

public function main() -> void {
    printStr("Hello, World!");

    // Define some constants
    const intOne: int = 34;
    const intTwo: int = 35;
    const intThree: int = 36;
    const intFour: int = 6;

    // Store the results of the operations in variables
    const additionResult: int = add(intOne, intTwo);
    const subtractResult: int = subtract(intTwo, intOne);
    const multiplyResult: int = multiply(intOne, intTwo);
    const divideResult: int   = divide(intOne, intFour);

    // Print the results
    printInt(additionResult);
    printInt(subtractResult);
    printInt(multiplyResult);
    printInt(divideResult);

    // Testing literals in function calls
    const anotherAddResult: int = add(34, 35);
    printInt(anotherAddResult);

    // Just some other print tests
    printInt(425);
    printStr("Hello, World Again!");
    printStr("--------------------");
    printStr("  ");

    const intArr: int[] = [1, 2, 3, 4, 5];
    const indexArr: int = intArr[3];

    // Test recursion
    const intZero: int = 5;
    test(0);

    printStr("--------------------");

    getStringLength();

    return;
}
