namespace test;

extern function printInt(integer: int) -> void;
extern function printIntPtr(integer: int) -> void;
extern function printStr(str: string) -> void;


public function test(numberIterator: int) -> void {
    const pleasework: int = numberIterator + 1;

    const intArr: int[] = [1, 2, 3, 4, 5];
    const indexArr: int = intArr[0];

    printStr("Printing the number: ");
    printInt(pleasework);
    printStr(" ");

    if(pleasework < 10) {
        test(pleasework);
    }
    else
    {
        return;
    }
    return;
}

public function add(a: int, b: int) -> int {
    return a + b;
}

public function subtract(a: int, b: int) -> int {
    return a - b;
}

public function multiply(a: int, b: int) -> int {
    return a * b;
}

public function divide(a: int, b: int) -> int {
    return a / b;
}


public function main() -> void {
    printStr("Hello, World!");
    // Test recursion
    const intZero: int = 5;
    test(5);

    // Define some constants
    const intOne: int = 34;
    const intTwo: int = 35;
    const intThree: int = 36;
    const intFour: int = 6;

    // Store the results of the operations in variables
    const additionResult: int = add(intOne, intTwo);
    const subtractResult: int = subtract(intTwo, intOne);
    const multiplyResult: int = multiply(intOne, intTwo);
    const divideResult: int   = divide(intOne, intFour);

    // Print the results
    printInt(additionResult);
    printInt(subtractResult);
    printInt(multiplyResult);
    printInt(divideResult);

    // Testing literals in function calls
    const anotherAddResult: int = add(34, 35);
    printInt(anotherAddResult);

    // Just some other print tests
    printInt(425);
    printStr("Hello, World Again!");

    return;
}
