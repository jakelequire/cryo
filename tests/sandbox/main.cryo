namespace Main;

struct Int {
    value: int;

    constructor(val: int) {
        this.value = val;
    }

    toString() -> string {
        return intToString(this.value);
    }

    fooMethod() -> void {
        printStr("Foo method called");
        return;
    }
}

class FooBaz {
    public anotherFooProp: string;

    constructor() {}

    public static anotherFooMethod() -> void {
        printStr("Another foo method called");
        return;
    }
}


function stringTesting() -> void {
    printStr("------- String Testing --------");

    const testString: string = "Hello ";
    printStr(testString);

    const testStringTwo: string = "World";
    printStr(testStringTwo);

    const testStringThree: string = testString + testStringTwo;
    printStr(testStringThree);

    const testStringFour: string = testString + "World";
    printStr(testStringFour);

    const testStringFive: string = "Hello " + testStringTwo;
    printStr(testStringFive);

    const testStringSix: string = "Hello " + "World";
    printStr(testStringSix);

    return;
}


function arrayTesting() -> void {
    printStr("--------- Array Testing ---------");
    const fooArr: int[] = [1, 2, 3, 4, 5];
    
    printInt(fooArr[0]);
    printInt(fooArr[1]);
    printInt(fooArr[2]);
    printInt(fooArr[3]);
    printInt(fooArr[4]);

    // This should throw an error and calls `sys_exit()` (for now).
    // Eventually, I'll just return null and move on with execution.
    // printInt(fooArr[5]);

    return;
}


function structTesting() -> void {
    printStr("-------- Struct Testing --------");
    const intTest: Int = 1234;
    const intTestTwo: int = intTest.value;
    printInt(intTestTwo);
    printInt(intTest.value);

    const strVal: string = intTest.toString();
    printStr(strVal);
    printStr(intTest.toString());

    intTest.fooMethod();

    return;
}


function binOpTest() -> void {
    printStr("------ Binary Ops Testing ------");
    const addTest: int = 34 + 36;
    printStr("Addition test: ");
    printInt(addTest);
    
    const subTest: int = 36 - 34;
    printStr("Subtraction test: ");
    printInt(subTest);

    const mulTest: int = 16 * 16;
    printStr("Multiplication test: ");
    printInt(mulTest);

    const divTest: int = 10 / 2;
    printStr("Division test: ");
    printInt(divTest);

    const modTest: int = 10 % 3;
    printStr("Modulus test: ");
    printInt(modTest);

    return;
}


function runtimeClassTesting() -> void {
    printStr("----- Runtime Class Testing -----");
    const filePathStr: String = "/home/phock/Programming/apps/cryo/testing.txt";
    const mode: String = "r";

    // const file: string = FS::readFile(filePathStr.value, mode.value);

    printStr("File contents:");
    //printStr(file);

    return;
}

function typeofTesting() -> void {
    printStr("-------- Typeof Testing --------");
    const foo: string = "Hello"; 
    const bar: int = 1234;
    const baz: boolean = true;
    const qux: Int = 1234;

    printStr("Type of foo: ");
    printStr(typeof(foo));

    printStr("Type of bar: ");
    printStr(typeof(bar));

    printStr("Type of baz: ");
    printStr(typeof(baz));

    printStr("Type of qux: ");
    printStr(typeof(qux));

    printStr("Type of int literal: ");
    printStr(typeof(1234));

    printStr("Type of string literal: ");
    printStr(typeof("Hello"));

    printStr("Type of boolean literal: ");
    printStr(typeof(true));
}

function anyTypeTesting() -> void {
    printStr("-------- Any Type Testing --------");

    return;
}

function forLoopTesting() -> void {
    printStr("-------- For Loop Testing --------");

    // {VAR_DECL}? ; {CONDITION} ; {INCREMENT} 
    // for (mut i: int = 0; i < 10; i = i++) {
    //     printInt(i);
    // }

    return;
}

function main(argc: int, argv: string[]) -> int {
    printStr("-------- Main Function --------");
    printStr("Arg count: ");
    printInt(argc);

    printStr("\nArgv[0]:");
    const argOne: string = argv[0];
    printStr(argOne);

    stringTesting();
    structTesting();
    binOpTest();
    arrayTesting();
    runtimeClassTesting();
    typeofTesting();
    // anyTypeTesting();
    // forLoopTesting();

    sys_exit(0);
    return 0;
}
