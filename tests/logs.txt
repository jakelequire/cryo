phock@phock-MS-7C02:~/Programming/apps/cryo$ cryo build ./tests/main.cryo 
[DEBUG] Argument Count: 1
Command: build
Building Cryo project...
Unknown Build Args, Building Single File...
Starting Lexer Initialization...
{lexer} -------------- <Input Source Code> --------------


{lexer} Lexer initialized. 
Start: 0x6391b29688c0 
Current: 0x6391b29688c0 

Source:
-------
extern function printInt(value: int) -> void;
extern function printConstIntPtr(value: int) -> void;
extern function printIntPtr(value: int) -> void;

extern function printStr(value: string) -> void;
extern function printConstStr(value: string) -> void;
extern function printStrU(value: string) -> void;

const qix: int = 34;
const foo: string = "Hello, World!";
const arr: int[] = [1, 2, 3, 4, 5];
const strArr: string[] = ["Hello", "World", "!"];


public function main() -> void {
    printInt(qix);
    printConstIntPtr(qix);
    printIntPtr(qix);

    printStr(foo);
    printConstStr(foo);
    printStrU(foo);

    return;
}



{lexer} -------------------- <END> ----------------------


[DEBUG] Lexer initialized


[Parser] Parsing program...
[AST] Creating Program Node
[AST_DEBUG] Creating node: 0
[AST] Created node of type: 0
[AST] Created Program Node
[Parser] @getNextToken | Current Token before: Type=0, Start=, Length=0
[Lexer] Getting next token...
[Lexer] Checking data type: extern
[Lexer] Created token: extern (Type: 115, Line: 1, Column: 6)
[Lexer] Identifier token created: extern
[Parser] @getNextToken | Next Token after: Type=115, Start=extern, Length=6
[Parser] Starting to parse statements...
[Parser] Parsing statement...
[Parser] Parsing extern...

<*> [Parser] Consuming token: TOKEN_KW_EXTERN (Expecting: TOKEN_KW_EXTERN) @Fn <parseExtern>

[Parser] @getNextToken | Current Token before: Type=115, Start=extern, Length=6
[Lexer] Getting next token...
[Lexer] Checking data type: function
[Lexer] Created token: function (Type: 62, Line: 1, Column: 15)
[Lexer] Identifier token created: function
[Parser] @getNextToken | Next Token after: Type=62, Start=function, Length=8
[Parser DEBUG] Current Token: TOKEN_KW_FN, Lexeme: function
[Parser] Parsing extern function declaration...

<*> [Parser] Consuming token: TOKEN_KW_FN (Expecting: TOKEN_KW_FN) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=62, Start=function, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: printInt
[Lexer] Created token: printInt (Type: 1, Line: 1, Column: 24)
[Lexer] Identifier token created: printInt
[Parser] @getNextToken | Next Token after: Type=1, Start=printInt, Length=8
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printInt
[AST_DEBUG] Creating node: 26
[AST] Created node of type: 26
[Parser] Function name: printInt
[Parser] @getNextToken | Current Token before: Type=1, Start=printInt, Length=8
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 1, Column: 25)
[Lexer] Symbol token created: (
[Parser] @getNextToken | Next Token after: Type=143, Start=(, Length=1
[Parser] Parsing parameter list...

<*> [Parser] Consuming token: TOKEN_LPAREN (Expecting: TOKEN_LPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=143, Start=(, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: value
[Lexer] Created token: value (Type: 1, Line: 1, Column: 30)
[Lexer] Identifier token created: value
[Parser] @getNextToken | Next Token after: Type=1, Start=value, Length=5
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: value
[Parser] Parsing parameter...
[Parser] @getNextToken | Current Token before: Type=1, Start=value, Length=5
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 1, Column: 31)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1

<*> [Parser] Consuming token: TOKEN_COLON (Expecting: TOKEN_COLON) @Fn <parseParameter>

[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: int
[Lexer] Created token: int (Type: 94, Line: 1, Column: 35)
[Lexer] Identifier token created: int
[Parser] @getNextToken | Next Token after: Type=94, Start=int, Length=3
[Parser DEBUG] Current Token: TOKEN_KW_INT, Lexeme: int
[Parser] Parsing type...
[Parser] Getting data type for input: int
[Parser] @getNextToken | Current Token before: Type=94, Start=int, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 1, Column: 36)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1
[AST] Creating Parameter Node: value
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Parameter Node: value
[Parser] Adding parameter to list: value

<!> [Parser] Parameter count: 1

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: -> (Type: 21, Line: 1, Column: 39)
[Lexer] Symbol token created: ->
[Parser] @getNextToken | Next Token after: Type=21, Start=->, Length=2
[Parser DEBUG] Current Token: TOKEN_RESULT_ARROW, Lexeme: ->
[Parser] Function parameter count: 1
[Parser] Found return type arrow
[Parser] @getNextToken | Current Token before: Type=21, Start=->, Length=2
[Lexer] Getting next token...
[Lexer] Checking data type: void
[Lexer] Created token: void (Type: 100, Line: 1, Column: 44)
[Lexer] Identifier token created: void
[Parser] @getNextToken | Next Token after: Type=100, Start=void, Length=4
[Parser] Parsing type...
[Parser] Getting data type for input: void
[Parser] @getNextToken | Current Token before: Type=100, Start=void, Length=4
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 1, Column: 45)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1


<#!> [Parser] Extern Function Return Type: TYPE_VOID 

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: extern
[Lexer] Created token: extern (Type: 115, Line: 2, Column: 7)
[Lexer] Identifier token created: extern
[Parser] @getNextToken | Next Token after: Type=115, Start=extern, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_EXTERN, Lexeme: extern
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 0, stmtCapacity = 8
[AST] After adding statement: stmtCount = 1, stmtCapacity = 8
Symbol added: printInt
[SymTable - Debug] Symbol count: 1
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Parsing extern...

<*> [Parser] Consuming token: TOKEN_KW_EXTERN (Expecting: TOKEN_KW_EXTERN) @Fn <parseExtern>

[Parser] @getNextToken | Current Token before: Type=115, Start=extern, Length=6
[Lexer] Getting next token...
[Lexer] Checking data type: function
[Lexer] Created token: function (Type: 62, Line: 2, Column: 16)
[Lexer] Identifier token created: function
[Parser] @getNextToken | Next Token after: Type=62, Start=function, Length=8
[Parser DEBUG] Current Token: TOKEN_KW_FN, Lexeme: function
[Parser] Parsing extern function declaration...

<*> [Parser] Consuming token: TOKEN_KW_FN (Expecting: TOKEN_KW_FN) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=62, Start=function, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: printConstIntPtr
[Lexer] Created token: printConstIntPtr (Type: 1, Line: 2, Column: 33)
[Lexer] Identifier token created: printConstIntPtr
[Parser] @getNextToken | Next Token after: Type=1, Start=printConstIntPtr, Length=16
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printConstIntPtr
[AST_DEBUG] Creating node: 26
[AST] Created node of type: 26
[Parser] Function name: printConstIntPtr
[Parser] @getNextToken | Current Token before: Type=1, Start=printConstIntPtr, Length=16
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 2, Column: 34)
[Lexer] Symbol token created: (
[Parser] @getNextToken | Next Token after: Type=143, Start=(, Length=1
[Parser] Parsing parameter list...

<*> [Parser] Consuming token: TOKEN_LPAREN (Expecting: TOKEN_LPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=143, Start=(, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: value
[Lexer] Created token: value (Type: 1, Line: 2, Column: 39)
[Lexer] Identifier token created: value
[Parser] @getNextToken | Next Token after: Type=1, Start=value, Length=5
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: value
[Parser] Parsing parameter...
[Parser] @getNextToken | Current Token before: Type=1, Start=value, Length=5
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 2, Column: 40)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1

<*> [Parser] Consuming token: TOKEN_COLON (Expecting: TOKEN_COLON) @Fn <parseParameter>

[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: int
[Lexer] Created token: int (Type: 94, Line: 2, Column: 44)
[Lexer] Identifier token created: int
[Parser] @getNextToken | Next Token after: Type=94, Start=int, Length=3
[Parser DEBUG] Current Token: TOKEN_KW_INT, Lexeme: int
[Parser] Parsing type...
[Parser] Getting data type for input: int
[Parser] @getNextToken | Current Token before: Type=94, Start=int, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 2, Column: 45)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1
[AST] Creating Parameter Node: value
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Parameter Node: value
[Parser] Adding parameter to list: value

<!> [Parser] Parameter count: 1

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: -> (Type: 21, Line: 2, Column: 48)
[Lexer] Symbol token created: ->
[Parser] @getNextToken | Next Token after: Type=21, Start=->, Length=2
[Parser DEBUG] Current Token: TOKEN_RESULT_ARROW, Lexeme: ->
[Parser] Function parameter count: 1
[Parser] Found return type arrow
[Parser] @getNextToken | Current Token before: Type=21, Start=->, Length=2
[Lexer] Getting next token...
[Lexer] Checking data type: void
[Lexer] Created token: void (Type: 100, Line: 2, Column: 53)
[Lexer] Identifier token created: void
[Parser] @getNextToken | Next Token after: Type=100, Start=void, Length=4
[Parser] Parsing type...
[Parser] Getting data type for input: void
[Parser] @getNextToken | Current Token before: Type=100, Start=void, Length=4
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 2, Column: 54)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1


<#!> [Parser] Extern Function Return Type: TYPE_VOID 

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: extern
[Lexer] Created token: extern (Type: 115, Line: 3, Column: 7)
[Lexer] Identifier token created: extern
[Parser] @getNextToken | Next Token after: Type=115, Start=extern, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_EXTERN, Lexeme: extern
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 1, stmtCapacity = 8
[AST] After adding statement: stmtCount = 2, stmtCapacity = 8
Symbol added: printConstIntPtr
[SymTable - Debug] Symbol count: 2
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Parsing extern...

<*> [Parser] Consuming token: TOKEN_KW_EXTERN (Expecting: TOKEN_KW_EXTERN) @Fn <parseExtern>

[Parser] @getNextToken | Current Token before: Type=115, Start=extern, Length=6
[Lexer] Getting next token...
[Lexer] Checking data type: function
[Lexer] Created token: function (Type: 62, Line: 3, Column: 16)
[Lexer] Identifier token created: function
[Parser] @getNextToken | Next Token after: Type=62, Start=function, Length=8
[Parser DEBUG] Current Token: TOKEN_KW_FN, Lexeme: function
[Parser] Parsing extern function declaration...

<*> [Parser] Consuming token: TOKEN_KW_FN (Expecting: TOKEN_KW_FN) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=62, Start=function, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: printIntPtr
[Lexer] Created token: printIntPtr (Type: 1, Line: 3, Column: 28)
[Lexer] Identifier token created: printIntPtr
[Parser] @getNextToken | Next Token after: Type=1, Start=printIntPtr, Length=11
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printIntPtr
[AST_DEBUG] Creating node: 26
[AST] Created node of type: 26
[Parser] Function name: printIntPtr
[Parser] @getNextToken | Current Token before: Type=1, Start=printIntPtr, Length=11
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 3, Column: 29)
[Lexer] Symbol token created: (
[Parser] @getNextToken | Next Token after: Type=143, Start=(, Length=1
[Parser] Parsing parameter list...

<*> [Parser] Consuming token: TOKEN_LPAREN (Expecting: TOKEN_LPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=143, Start=(, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: value
[Lexer] Created token: value (Type: 1, Line: 3, Column: 34)
[Lexer] Identifier token created: value
[Parser] @getNextToken | Next Token after: Type=1, Start=value, Length=5
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: value
[Parser] Parsing parameter...
[Parser] @getNextToken | Current Token before: Type=1, Start=value, Length=5
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 3, Column: 35)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1

<*> [Parser] Consuming token: TOKEN_COLON (Expecting: TOKEN_COLON) @Fn <parseParameter>

[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: int
[Lexer] Created token: int (Type: 94, Line: 3, Column: 39)
[Lexer] Identifier token created: int
[Parser] @getNextToken | Next Token after: Type=94, Start=int, Length=3
[Parser DEBUG] Current Token: TOKEN_KW_INT, Lexeme: int
[Parser] Parsing type...
[Parser] Getting data type for input: int
[Parser] @getNextToken | Current Token before: Type=94, Start=int, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 3, Column: 40)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1
[AST] Creating Parameter Node: value
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Parameter Node: value
[Parser] Adding parameter to list: value

<!> [Parser] Parameter count: 1

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: -> (Type: 21, Line: 3, Column: 43)
[Lexer] Symbol token created: ->
[Parser] @getNextToken | Next Token after: Type=21, Start=->, Length=2
[Parser DEBUG] Current Token: TOKEN_RESULT_ARROW, Lexeme: ->
[Parser] Function parameter count: 1
[Parser] Found return type arrow
[Parser] @getNextToken | Current Token before: Type=21, Start=->, Length=2
[Lexer] Getting next token...
[Lexer] Checking data type: void
[Lexer] Created token: void (Type: 100, Line: 3, Column: 48)
[Lexer] Identifier token created: void
[Parser] @getNextToken | Next Token after: Type=100, Start=void, Length=4
[Parser] Parsing type...
[Parser] Getting data type for input: void
[Parser] @getNextToken | Current Token before: Type=100, Start=void, Length=4
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 3, Column: 49)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1


<#!> [Parser] Extern Function Return Type: TYPE_VOID 

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: extern
[Lexer] Created token: extern (Type: 115, Line: 5, Column: 7)
[Lexer] Identifier token created: extern
[Parser] @getNextToken | Next Token after: Type=115, Start=extern, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_EXTERN, Lexeme: extern
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 2, stmtCapacity = 8
[AST] After adding statement: stmtCount = 3, stmtCapacity = 8
Symbol added: printIntPtr
[SymTable - Debug] Symbol count: 3
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Parsing extern...

<*> [Parser] Consuming token: TOKEN_KW_EXTERN (Expecting: TOKEN_KW_EXTERN) @Fn <parseExtern>

[Parser] @getNextToken | Current Token before: Type=115, Start=extern, Length=6
[Lexer] Getting next token...
[Lexer] Checking data type: function
[Lexer] Created token: function (Type: 62, Line: 5, Column: 16)
[Lexer] Identifier token created: function
[Parser] @getNextToken | Next Token after: Type=62, Start=function, Length=8
[Parser DEBUG] Current Token: TOKEN_KW_FN, Lexeme: function
[Parser] Parsing extern function declaration...

<*> [Parser] Consuming token: TOKEN_KW_FN (Expecting: TOKEN_KW_FN) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=62, Start=function, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: printStr
[Lexer] Created token: printStr (Type: 1, Line: 5, Column: 25)
[Lexer] Identifier token created: printStr
[Parser] @getNextToken | Next Token after: Type=1, Start=printStr, Length=8
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printStr
[AST_DEBUG] Creating node: 26
[AST] Created node of type: 26
[Parser] Function name: printStr
[Parser] @getNextToken | Current Token before: Type=1, Start=printStr, Length=8
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 5, Column: 26)
[Lexer] Symbol token created: (
[Parser] @getNextToken | Next Token after: Type=143, Start=(, Length=1
[Parser] Parsing parameter list...

<*> [Parser] Consuming token: TOKEN_LPAREN (Expecting: TOKEN_LPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=143, Start=(, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: value
[Lexer] Created token: value (Type: 1, Line: 5, Column: 31)
[Lexer] Identifier token created: value
[Parser] @getNextToken | Next Token after: Type=1, Start=value, Length=5
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: value
[Parser] Parsing parameter...
[Parser] @getNextToken | Current Token before: Type=1, Start=value, Length=5
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 5, Column: 32)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1

<*> [Parser] Consuming token: TOKEN_COLON (Expecting: TOKEN_COLON) @Fn <parseParameter>

[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: string
[Lexer] Created token: string (Type: 102, Line: 5, Column: 39)
[Lexer] Identifier token created: string
[Parser] @getNextToken | Next Token after: Type=102, Start=string, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_STRING, Lexeme: string
[Parser] Parsing type...
[Parser] Getting data type for input: string
[Parser] @getNextToken | Current Token before: Type=102, Start=string, Length=6
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 5, Column: 40)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1
[AST] Creating Parameter Node: value
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Parameter Node: value
[Parser] Adding parameter to list: value

<!> [Parser] Parameter count: 1

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: -> (Type: 21, Line: 5, Column: 43)
[Lexer] Symbol token created: ->
[Parser] @getNextToken | Next Token after: Type=21, Start=->, Length=2
[Parser DEBUG] Current Token: TOKEN_RESULT_ARROW, Lexeme: ->
[Parser] Function parameter count: 1
[Parser] Found return type arrow
[Parser] @getNextToken | Current Token before: Type=21, Start=->, Length=2
[Lexer] Getting next token...
[Lexer] Checking data type: void
[Lexer] Created token: void (Type: 100, Line: 5, Column: 48)
[Lexer] Identifier token created: void
[Parser] @getNextToken | Next Token after: Type=100, Start=void, Length=4
[Parser] Parsing type...
[Parser] Getting data type for input: void
[Parser] @getNextToken | Current Token before: Type=100, Start=void, Length=4
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 5, Column: 49)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1


<#!> [Parser] Extern Function Return Type: TYPE_VOID 

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: extern
[Lexer] Created token: extern (Type: 115, Line: 6, Column: 7)
[Lexer] Identifier token created: extern
[Parser] @getNextToken | Next Token after: Type=115, Start=extern, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_EXTERN, Lexeme: extern
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 3, stmtCapacity = 8
[AST] After adding statement: stmtCount = 4, stmtCapacity = 8
Symbol added: printStr
[SymTable - Debug] Symbol count: 4
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
printStr             EXTERN_FUNCTION          void               0          false          1         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Parsing extern...

<*> [Parser] Consuming token: TOKEN_KW_EXTERN (Expecting: TOKEN_KW_EXTERN) @Fn <parseExtern>

[Parser] @getNextToken | Current Token before: Type=115, Start=extern, Length=6
[Lexer] Getting next token...
[Lexer] Checking data type: function
[Lexer] Created token: function (Type: 62, Line: 6, Column: 16)
[Lexer] Identifier token created: function
[Parser] @getNextToken | Next Token after: Type=62, Start=function, Length=8
[Parser DEBUG] Current Token: TOKEN_KW_FN, Lexeme: function
[Parser] Parsing extern function declaration...

<*> [Parser] Consuming token: TOKEN_KW_FN (Expecting: TOKEN_KW_FN) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=62, Start=function, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: printConstStr
[Lexer] Created token: printConstStr (Type: 1, Line: 6, Column: 30)
[Lexer] Identifier token created: printConstStr
[Parser] @getNextToken | Next Token after: Type=1, Start=printConstStr, Length=13
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printConstStr
[AST_DEBUG] Creating node: 26
[AST] Created node of type: 26
[Parser] Function name: printConstStr
[Parser] @getNextToken | Current Token before: Type=1, Start=printConstStr, Length=13
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 6, Column: 31)
[Lexer] Symbol token created: (
[Parser] @getNextToken | Next Token after: Type=143, Start=(, Length=1
[Parser] Parsing parameter list...

<*> [Parser] Consuming token: TOKEN_LPAREN (Expecting: TOKEN_LPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=143, Start=(, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: value
[Lexer] Created token: value (Type: 1, Line: 6, Column: 36)
[Lexer] Identifier token created: value
[Parser] @getNextToken | Next Token after: Type=1, Start=value, Length=5
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: value
[Parser] Parsing parameter...
[Parser] @getNextToken | Current Token before: Type=1, Start=value, Length=5
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 6, Column: 37)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1

<*> [Parser] Consuming token: TOKEN_COLON (Expecting: TOKEN_COLON) @Fn <parseParameter>

[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: string
[Lexer] Created token: string (Type: 102, Line: 6, Column: 44)
[Lexer] Identifier token created: string
[Parser] @getNextToken | Next Token after: Type=102, Start=string, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_STRING, Lexeme: string
[Parser] Parsing type...
[Parser] Getting data type for input: string
[Parser] @getNextToken | Current Token before: Type=102, Start=string, Length=6
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 6, Column: 45)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1
[AST] Creating Parameter Node: value
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Parameter Node: value
[Parser] Adding parameter to list: value

<!> [Parser] Parameter count: 1

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: -> (Type: 21, Line: 6, Column: 48)
[Lexer] Symbol token created: ->
[Parser] @getNextToken | Next Token after: Type=21, Start=->, Length=2
[Parser DEBUG] Current Token: TOKEN_RESULT_ARROW, Lexeme: ->
[Parser] Function parameter count: 1
[Parser] Found return type arrow
[Parser] @getNextToken | Current Token before: Type=21, Start=->, Length=2
[Lexer] Getting next token...
[Lexer] Checking data type: void
[Lexer] Created token: void (Type: 100, Line: 6, Column: 53)
[Lexer] Identifier token created: void
[Parser] @getNextToken | Next Token after: Type=100, Start=void, Length=4
[Parser] Parsing type...
[Parser] Getting data type for input: void
[Parser] @getNextToken | Current Token before: Type=100, Start=void, Length=4
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 6, Column: 54)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1


<#!> [Parser] Extern Function Return Type: TYPE_VOID 

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: extern
[Lexer] Created token: extern (Type: 115, Line: 7, Column: 7)
[Lexer] Identifier token created: extern
[Parser] @getNextToken | Next Token after: Type=115, Start=extern, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_EXTERN, Lexeme: extern
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 4, stmtCapacity = 8
[AST] After adding statement: stmtCount = 5, stmtCapacity = 8
Symbol added: printConstStr
[SymTable - Debug] Symbol count: 5
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
printStr             EXTERN_FUNCTION          void               0          false          1         
printConstStr        EXTERN_FUNCTION          void               0          false          1         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Parsing extern...

<*> [Parser] Consuming token: TOKEN_KW_EXTERN (Expecting: TOKEN_KW_EXTERN) @Fn <parseExtern>

[Parser] @getNextToken | Current Token before: Type=115, Start=extern, Length=6
[Lexer] Getting next token...
[Lexer] Checking data type: function
[Lexer] Created token: function (Type: 62, Line: 7, Column: 16)
[Lexer] Identifier token created: function
[Parser] @getNextToken | Next Token after: Type=62, Start=function, Length=8
[Parser DEBUG] Current Token: TOKEN_KW_FN, Lexeme: function
[Parser] Parsing extern function declaration...

<*> [Parser] Consuming token: TOKEN_KW_FN (Expecting: TOKEN_KW_FN) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=62, Start=function, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: printStrU
[Lexer] Created token: printStrU (Type: 1, Line: 7, Column: 26)
[Lexer] Identifier token created: printStrU
[Parser] @getNextToken | Next Token after: Type=1, Start=printStrU, Length=9
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printStrU
[AST_DEBUG] Creating node: 26
[AST] Created node of type: 26
[Parser] Function name: printStrU
[Parser] @getNextToken | Current Token before: Type=1, Start=printStrU, Length=9
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 7, Column: 27)
[Lexer] Symbol token created: (
[Parser] @getNextToken | Next Token after: Type=143, Start=(, Length=1
[Parser] Parsing parameter list...

<*> [Parser] Consuming token: TOKEN_LPAREN (Expecting: TOKEN_LPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=143, Start=(, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: value
[Lexer] Created token: value (Type: 1, Line: 7, Column: 32)
[Lexer] Identifier token created: value
[Parser] @getNextToken | Next Token after: Type=1, Start=value, Length=5
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: value
[Parser] Parsing parameter...
[Parser] @getNextToken | Current Token before: Type=1, Start=value, Length=5
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 7, Column: 33)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1

<*> [Parser] Consuming token: TOKEN_COLON (Expecting: TOKEN_COLON) @Fn <parseParameter>

[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: string
[Lexer] Created token: string (Type: 102, Line: 7, Column: 40)
[Lexer] Identifier token created: string
[Parser] @getNextToken | Next Token after: Type=102, Start=string, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_STRING, Lexeme: string
[Parser] Parsing type...
[Parser] Getting data type for input: string
[Parser] @getNextToken | Current Token before: Type=102, Start=string, Length=6
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 7, Column: 41)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1
[AST] Creating Parameter Node: value
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Parameter Node: value
[Parser] Adding parameter to list: value

<!> [Parser] Parameter count: 1

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: -> (Type: 21, Line: 7, Column: 44)
[Lexer] Symbol token created: ->
[Parser] @getNextToken | Next Token after: Type=21, Start=->, Length=2
[Parser DEBUG] Current Token: TOKEN_RESULT_ARROW, Lexeme: ->
[Parser] Function parameter count: 1
[Parser] Found return type arrow
[Parser] @getNextToken | Current Token before: Type=21, Start=->, Length=2
[Lexer] Getting next token...
[Lexer] Checking data type: void
[Lexer] Created token: void (Type: 100, Line: 7, Column: 49)
[Lexer] Identifier token created: void
[Parser] @getNextToken | Next Token after: Type=100, Start=void, Length=4
[Parser] Parsing type...
[Parser] Getting data type for input: void
[Parser] @getNextToken | Current Token before: Type=100, Start=void, Length=4
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 7, Column: 50)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1


<#!> [Parser] Extern Function Return Type: TYPE_VOID 

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseExternFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: const
[Lexer] Created token: const (Type: 63, Line: 9, Column: 6)
[Lexer] Identifier token created: const
[Parser] @getNextToken | Next Token after: Type=63, Start=const, Length=5
[Parser DEBUG] Current Token: TOKEN_KW_CONST, Lexeme: const
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 5, stmtCapacity = 8
[AST] After adding statement: stmtCount = 6, stmtCapacity = 8
Symbol added: printStrU
[SymTable - Debug] Symbol count: 6
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
printStr             EXTERN_FUNCTION          void               0          false          1         
printConstStr        EXTERN_FUNCTION          void               0          false          1         
printStrU            EXTERN_FUNCTION          void               0          false          1         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Entering parseVarDeclaration
[Parser] @getNextToken | Current Token before: Type=63, Start=const, Length=5
[Lexer] Getting next token...
[Lexer] Checking data type: qix
[Lexer] Created token: qix (Type: 1, Line: 9, Column: 10)
[Lexer] Identifier token created: qix
[Parser] @getNextToken | Next Token after: Type=1, Start=qix, Length=3
[Parser] @getNextToken | Current Token before: Type=1, Start=qix, Length=3
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 9, Column: 11)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1
[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: int
[Lexer] Created token: int (Type: 94, Line: 9, Column: 15)
[Lexer] Identifier token created: int
[Parser] @getNextToken | Next Token after: Type=94, Start=int, Length=3
[Parser] Getting data type for input: int
[Parser] @getNextToken | Current Token before: Type=94, Start=int, Length=3
[Lexer] Getting next token...
[Lexer] Created token: = (Type: 127, Line: 9, Column: 17)
[Lexer] Symbol token created: =
[Parser] @getNextToken | Next Token after: Type=127, Start==, Length=1
[Parser] @getNextToken | Current Token before: Type=127, Start==, Length=1
[Lexer] Getting next token...
[Lexer] Created token: 34 (Type: 22, Line: 9, Column: 20)
[Lexer] Number token: 34
[Lexer] Number token created: 34
[Parser] @getNextToken | Next Token after: Type=22, Start=34, Length=2
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_INT_LITERAL
[Parser] Parsing integer literal
[AST] Creating Integer Literal Node: 34
[AST_DEBUG] Creating node: 7
[AST] Created node of type: 7
[AST] Created Integer Literal Node: 34
[Parser] @getNextToken | Current Token before: Type=22, Start=34, Length=2
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 9, Column: 21)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseVarDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: const
[Lexer] Created token: const (Type: 63, Line: 10, Column: 6)
[Lexer] Identifier token created: const
[Parser] @getNextToken | Next Token after: Type=63, Start=const, Length=5
[Parser DEBUG] Current Token: TOKEN_KW_CONST, Lexeme: const
[AST] Creating Variable Declaration Node: qix
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Variable Declaration Node: qix
[Parser] Created Variable Declaration Node: qix
[Parser] Variable Declaration Node Type: 2
[Parser] Variable Declaration Node Type: 0
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 6, stmtCapacity = 8
[AST] After adding statement: stmtCount = 7, stmtCapacity = 8
Symbol added: qix
[SymTable - Debug] Symbol count: 7
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
printStr             EXTERN_FUNCTION          void               0          false          1         
printConstStr        EXTERN_FUNCTION          void               0          false          1         
printStrU            EXTERN_FUNCTION          void               0          false          1         
qix                  VAR_DECLARATION          int                0          false          0         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Entering parseVarDeclaration
[Parser] @getNextToken | Current Token before: Type=63, Start=const, Length=5
[Lexer] Getting next token...
[Lexer] Checking data type: foo
[Lexer] Created token: foo (Type: 1, Line: 10, Column: 10)
[Lexer] Identifier token created: foo
[Parser] @getNextToken | Next Token after: Type=1, Start=foo, Length=3
[Parser] @getNextToken | Current Token before: Type=1, Start=foo, Length=3
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 10, Column: 11)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1
[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: string
[Lexer] Created token: string (Type: 102, Line: 10, Column: 18)
[Lexer] Identifier token created: string
[Parser] @getNextToken | Next Token after: Type=102, Start=string, Length=6
[Parser] Getting data type for input: string
[Parser] @getNextToken | Current Token before: Type=102, Start=string, Length=6
[Lexer] Getting next token...
[Lexer] Created token: = (Type: 127, Line: 10, Column: 20)
[Lexer] Symbol token created: =
[Parser] @getNextToken | Next Token after: Type=127, Start==, Length=1
[Parser] @getNextToken | Current Token before: Type=127, Start==, Length=1
[Lexer] Getting next token...
[Lexer] Created token: "Hello, World!" (Type: 24, Line: 10, Column: 36)
[Lexer] String token: "Hello, World!"
[Lexer] String token created: "Hello, World!"
[Parser] @getNextToken | Next Token after: Type=24, Start="Hello, World!", Length=15
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_STRING_LITERAL
[Parser] Parsing string literal
[AST] Creating String Literal Node: Hello, World!
[AST_DEBUG] Creating node: 20
[AST] Created node of type: 20
[AST] Created String Literal Node: Hello, World!
[Parser] @getNextToken | Current Token before: Type=24, Start="Hello, World!", Length=15
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 10, Column: 37)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseVarDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: const
[Lexer] Created token: const (Type: 63, Line: 11, Column: 6)
[Lexer] Identifier token created: const
[Parser] @getNextToken | Next Token after: Type=63, Start=const, Length=5
[Parser DEBUG] Current Token: TOKEN_KW_CONST, Lexeme: const
[AST] Creating Variable Declaration Node: foo
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Variable Declaration Node: foo
[Parser] Created Variable Declaration Node: foo
[Parser] Variable Declaration Node Type: 2
[Parser] Variable Declaration Node Type: 3
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 7, stmtCapacity = 8
[AST] After adding statement: stmtCount = 8, stmtCapacity = 8
Symbol added: foo
[SymTable - Debug] Symbol count: 8
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
printStr             EXTERN_FUNCTION          void               0          false          1         
printConstStr        EXTERN_FUNCTION          void               0          false          1         
printStrU            EXTERN_FUNCTION          void               0          false          1         
qix                  VAR_DECLARATION          int                0          false          0         
foo                  VAR_DECLARATION          string             0          false          0         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Entering parseVarDeclaration
[Parser] @getNextToken | Current Token before: Type=63, Start=const, Length=5
[Lexer] Getting next token...
[Lexer] Checking data type: arr
[Lexer] Created token: arr (Type: 1, Line: 11, Column: 10)
[Lexer] Identifier token created: arr
[Parser] @getNextToken | Next Token after: Type=1, Start=arr, Length=3
[Parser] @getNextToken | Current Token before: Type=1, Start=arr, Length=3
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 11, Column: 11)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1
[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: int
[Lexer] Checking data type: int[]
[Lexer] Created token: int[] (Type: 94, Line: 11, Column: 17)
[Lexer] Identifier token created: int[]
[Parser] @getNextToken | Next Token after: Type=94, Start=int[], Length=5
[Parser] Getting data type for input: int[]
[Parser] @getNextToken | Current Token before: Type=94, Start=int[], Length=5
[Lexer] Getting next token...
[Lexer] Created token: = (Type: 127, Line: 11, Column: 19)
[Lexer] Symbol token created: =
[Parser] @getNextToken | Next Token after: Type=127, Start==, Length=1
[Parser] @getNextToken | Current Token before: Type=127, Start==, Length=1
[Lexer] Getting next token...
[Lexer] Created token: [ (Type: 145, Line: 11, Column: 21)
[Lexer] Symbol token created: [
[Parser] @getNextToken | Next Token after: Type=145, Start=[, Length=1
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_LBRACKET
[Parser] Parsing array literal
[Parser] Parsing array literal...

<*> [Parser] Consuming token: TOKEN_LBRACKET (Expecting: TOKEN_LBRACKET) @Fn <parseArrayLiteral>

[Parser] @getNextToken | Current Token before: Type=145, Start=[, Length=1
[Lexer] Getting next token...
[Lexer] Created token: 1 (Type: 22, Line: 11, Column: 22)
[Lexer] Number token: 1
[Lexer] Number token created: 1
[Parser] @getNextToken | Next Token after: Type=22, Start=1, Length=1
[Parser DEBUG] Current Token: TOKEN_INT_LITERAL, Lexeme: 1
[AST] Creating Array Literal Node
[AST_DEBUG] Creating node: 23
[AST] Created node of type: 23
[AST] Created Array Literal Node
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_INT_LITERAL
[Parser] Parsing integer literal
[AST] Creating Integer Literal Node: 1
[AST_DEBUG] Creating node: 7
[AST] Created node of type: 7
[AST] Created Integer Literal Node: 1
[Parser] @getNextToken | Current Token before: Type=22, Start=1, Length=1
[Lexer] Getting next token...
[Lexer] Created token: , (Type: 129, Line: 11, Column: 23)
[Lexer] Symbol token created: ,
[Parser] @getNextToken | Next Token after: Type=129, Start=,, Length=1
[Parser] Adding element to array literal
[Parser] @getNextToken | Current Token before: Type=129, Start=,, Length=1
[Lexer] Getting next token...
[Lexer] Created token: 2 (Type: 22, Line: 11, Column: 25)
[Lexer] Number token: 2
[Lexer] Number token created: 2
[Parser] @getNextToken | Next Token after: Type=22, Start=2, Length=1
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_INT_LITERAL
[Parser] Parsing integer literal
[AST] Creating Integer Literal Node: 2
[AST_DEBUG] Creating node: 7
[AST] Created node of type: 7
[AST] Created Integer Literal Node: 2
[Parser] @getNextToken | Current Token before: Type=22, Start=2, Length=1
[Lexer] Getting next token...
[Lexer] Created token: , (Type: 129, Line: 11, Column: 26)
[Lexer] Symbol token created: ,
[Parser] @getNextToken | Next Token after: Type=129, Start=,, Length=1
[Parser] Adding element to array literal
[Parser] @getNextToken | Current Token before: Type=129, Start=,, Length=1
[Lexer] Getting next token...
[Lexer] Created token: 3 (Type: 22, Line: 11, Column: 28)
[Lexer] Number token: 3
[Lexer] Number token created: 3
[Parser] @getNextToken | Next Token after: Type=22, Start=3, Length=1
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_INT_LITERAL
[Parser] Parsing integer literal
[AST] Creating Integer Literal Node: 3
[AST_DEBUG] Creating node: 7
[AST] Created node of type: 7
[AST] Created Integer Literal Node: 3
[Parser] @getNextToken | Current Token before: Type=22, Start=3, Length=1
[Lexer] Getting next token...
[Lexer] Created token: , (Type: 129, Line: 11, Column: 29)
[Lexer] Symbol token created: ,
[Parser] @getNextToken | Next Token after: Type=129, Start=,, Length=1
[Parser] Adding element to array literal
[Parser] @getNextToken | Current Token before: Type=129, Start=,, Length=1
[Lexer] Getting next token...
[Lexer] Created token: 4 (Type: 22, Line: 11, Column: 31)
[Lexer] Number token: 4
[Lexer] Number token created: 4
[Parser] @getNextToken | Next Token after: Type=22, Start=4, Length=1
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_INT_LITERAL
[Parser] Parsing integer literal
[AST] Creating Integer Literal Node: 4
[AST_DEBUG] Creating node: 7
[AST] Created node of type: 7
[AST] Created Integer Literal Node: 4
[Parser] @getNextToken | Current Token before: Type=22, Start=4, Length=1
[Lexer] Getting next token...
[Lexer] Created token: , (Type: 129, Line: 11, Column: 32)
[Lexer] Symbol token created: ,
[Parser] @getNextToken | Next Token after: Type=129, Start=,, Length=1
[Parser] Adding element to array literal
[Parser] @getNextToken | Current Token before: Type=129, Start=,, Length=1
[Lexer] Getting next token...
[Lexer] Created token: 5 (Type: 22, Line: 11, Column: 34)
[Lexer] Number token: 5
[Lexer] Number token created: 5
[Parser] @getNextToken | Next Token after: Type=22, Start=5, Length=1
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_INT_LITERAL
[Parser] Parsing integer literal
[AST] Creating Integer Literal Node: 5
[AST_DEBUG] Creating node: 7
[AST] Created node of type: 7
[AST] Created Integer Literal Node: 5
[Parser] @getNextToken | Current Token before: Type=22, Start=5, Length=1
[Lexer] Getting next token...
[Lexer] Created token: ] (Type: 146, Line: 11, Column: 35)
[Lexer] Symbol token created: ]
[Parser] @getNextToken | Next Token after: Type=146, Start=], Length=1
[Parser] Adding element to array literal

<*> [Parser] Consuming token: TOKEN_RBRACKET (Expecting: TOKEN_RBRACKET) @Fn <parseArrayLiteral>

[Parser] @getNextToken | Current Token before: Type=146, Start=], Length=1
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 11, Column: 36)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseVarDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: const
[Lexer] Created token: const (Type: 63, Line: 12, Column: 6)
[Lexer] Identifier token created: const
[Parser] @getNextToken | Next Token after: Type=63, Start=const, Length=5
[Parser DEBUG] Current Token: TOKEN_KW_CONST, Lexeme: const
[AST] Creating Variable Declaration Node: arr
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Variable Declaration Node: arr
[Parser] Created Variable Declaration Node: arr
[Parser] Variable Declaration Node Type: 2
[Parser] Variable Declaration Node Type: 10
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 8, stmtCapacity = 8
[AST] After adding statement: stmtCount = 9, stmtCapacity = 16
Symbol added: arr
[SymTable - Debug] Symbol count: 9
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
printStr             EXTERN_FUNCTION          void               0          false          1         
printConstStr        EXTERN_FUNCTION          void               0          false          1         
printStrU            EXTERN_FUNCTION          void               0          false          1         
qix                  VAR_DECLARATION          int                0          false          0         
foo                  VAR_DECLARATION          string             0          false          0         
arr                  VAR_DECLARATION          int[]              0          false          0         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Entering parseVarDeclaration
[Parser] @getNextToken | Current Token before: Type=63, Start=const, Length=5
[Lexer] Getting next token...
[Lexer] Checking data type: strArr
[Lexer] Created token: strArr (Type: 1, Line: 12, Column: 13)
[Lexer] Identifier token created: strArr
[Parser] @getNextToken | Next Token after: Type=1, Start=strArr, Length=6
[Parser] @getNextToken | Current Token before: Type=1, Start=strArr, Length=6
[Lexer] Getting next token...
[Lexer] Created token: : (Type: 124, Line: 12, Column: 14)
[Lexer] Symbol token created: :
[Parser] @getNextToken | Next Token after: Type=124, Start=:, Length=1
[Parser] @getNextToken | Current Token before: Type=124, Start=:, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: string
[Lexer] Checking data type: string[]
[Lexer] Created token: string[] (Type: 102, Line: 12, Column: 23)
[Lexer] Identifier token created: string[]
[Parser] @getNextToken | Next Token after: Type=102, Start=string[], Length=8
[Parser] Getting data type for input: string[]
[Parser] @getNextToken | Current Token before: Type=102, Start=string[], Length=8
[Lexer] Getting next token...
[Lexer] Created token: = (Type: 127, Line: 12, Column: 25)
[Lexer] Symbol token created: =
[Parser] @getNextToken | Next Token after: Type=127, Start==, Length=1
[Parser] @getNextToken | Current Token before: Type=127, Start==, Length=1
[Lexer] Getting next token...
[Lexer] Created token: [ (Type: 145, Line: 12, Column: 27)
[Lexer] Symbol token created: [
[Parser] @getNextToken | Next Token after: Type=145, Start=[, Length=1
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_LBRACKET
[Parser] Parsing array literal
[Parser] Parsing array literal...

<*> [Parser] Consuming token: TOKEN_LBRACKET (Expecting: TOKEN_LBRACKET) @Fn <parseArrayLiteral>

[Parser] @getNextToken | Current Token before: Type=145, Start=[, Length=1
[Lexer] Getting next token...
[Lexer] Created token: "Hello" (Type: 24, Line: 12, Column: 34)
[Lexer] String token: "Hello"
[Lexer] String token created: "Hello"
[Parser] @getNextToken | Next Token after: Type=24, Start="Hello", Length=7
[Parser DEBUG] Current Token: TOKEN_STRING_LITERAL, Lexeme: "Hello"
[AST] Creating Array Literal Node
[AST_DEBUG] Creating node: 23
[AST] Created node of type: 23
[AST] Created Array Literal Node
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_STRING_LITERAL
[Parser] Parsing string literal
[AST] Creating String Literal Node: Hello
[AST_DEBUG] Creating node: 20
[AST] Created node of type: 20
[AST] Created String Literal Node: Hello
[Parser] @getNextToken | Current Token before: Type=24, Start="Hello", Length=7
[Lexer] Getting next token...
[Lexer] Created token: , (Type: 129, Line: 12, Column: 35)
[Lexer] Symbol token created: ,
[Parser] @getNextToken | Next Token after: Type=129, Start=,, Length=1
[Parser] Adding element to array literal
[Parser] @getNextToken | Current Token before: Type=129, Start=,, Length=1
[Lexer] Getting next token...
[Lexer] Created token: "World" (Type: 24, Line: 12, Column: 43)
[Lexer] String token: "World"
[Lexer] String token created: "World"
[Parser] @getNextToken | Next Token after: Type=24, Start="World", Length=7
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_STRING_LITERAL
[Parser] Parsing string literal
[AST] Creating String Literal Node: World
[AST_DEBUG] Creating node: 20
[AST] Created node of type: 20
[AST] Created String Literal Node: World
[Parser] @getNextToken | Current Token before: Type=24, Start="World", Length=7
[Lexer] Getting next token...
[Lexer] Created token: , (Type: 129, Line: 12, Column: 44)
[Lexer] Symbol token created: ,
[Parser] @getNextToken | Next Token after: Type=129, Start=,, Length=1
[Parser] Adding element to array literal
[Parser] @getNextToken | Current Token before: Type=129, Start=,, Length=1
[Lexer] Getting next token...
[Lexer] Created token: "!" (Type: 24, Line: 12, Column: 48)
[Lexer] String token: "!"
[Lexer] String token created: "!"
[Parser] @getNextToken | Next Token after: Type=24, Start="!", Length=3
[Parser] Parsing expression...
[Parser] Parsing primary expression...
[Parser] Current Token: TOKEN_STRING_LITERAL
[Parser] Parsing string literal
[AST] Creating String Literal Node: !
[AST_DEBUG] Creating node: 20
[AST] Created node of type: 20
[AST] Created String Literal Node: !
[Parser] @getNextToken | Current Token before: Type=24, Start="!", Length=3
[Lexer] Getting next token...
[Lexer] Created token: ] (Type: 146, Line: 12, Column: 49)
[Lexer] Symbol token created: ]
[Parser] @getNextToken | Next Token after: Type=146, Start=], Length=1
[Parser] Adding element to array literal

<*> [Parser] Consuming token: TOKEN_RBRACKET (Expecting: TOKEN_RBRACKET) @Fn <parseArrayLiteral>

[Parser] @getNextToken | Current Token before: Type=146, Start=], Length=1
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 12, Column: 50)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseVarDeclaration>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: public
[Lexer] Created token: public (Type: 64, Line: 15, Column: 7)
[Lexer] Identifier token created: public
[Parser] @getNextToken | Next Token after: Type=64, Start=public, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_PUBLIC, Lexeme: public
[AST] Creating Variable Declaration Node: strArr
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Variable Declaration Node: strArr
[Parser] Created Variable Declaration Node: strArr
[Parser] Variable Declaration Node Type: 2
[Parser] Variable Declaration Node Type: 12
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 9, stmtCapacity = 16
[AST] After adding statement: stmtCount = 10, stmtCapacity = 16
Symbol added: strArr
[SymTable - Debug] Symbol count: 10
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 10

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
printStr             EXTERN_FUNCTION          void               0          false          1         
printConstStr        EXTERN_FUNCTION          void               0          false          1         
printStrU            EXTERN_FUNCTION          void               0          false          1         
qix                  VAR_DECLARATION          int                0          false          0         
foo                  VAR_DECLARATION          string             0          false          0         
arr                  VAR_DECLARATION          int[]              0          false          0         
strArr               VAR_DECLARATION          string[]           0          false          0         
-------------------------------------------------------------------------------------------------
[Parser] Parsing statement...
[Parser] Parsing public declaration...

<*> [Parser] Consuming token: TOKEN_KW_PUBLIC (Expecting: TOKEN_KW_PUBLIC) @Fn <parsePublicDeclaration>

[Parser] @getNextToken | Current Token before: Type=64, Start=public, Length=6
[Lexer] Getting next token...
[Lexer] Checking data type: function
[Lexer] Created token: function (Type: 62, Line: 15, Column: 16)
[Lexer] Identifier token created: function
[Parser] @getNextToken | Next Token after: Type=62, Start=function, Length=8
[Parser DEBUG] Current Token: TOKEN_KW_FN, Lexeme: function
[Parser] Parsing function declaration...

<*> [Parser] Consuming token: TOKEN_KW_FN (Expecting: TOKEN_KW_FN) @Fn <parseFunctionDeclaration>

[Parser] @getNextToken | Current Token before: Type=62, Start=function, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: main
[Lexer] Created token: main (Type: 1, Line: 15, Column: 21)
[Lexer] Identifier token created: main
[Parser] @getNextToken | Next Token after: Type=1, Start=main, Length=4
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: main
[Parser] Function name: main
[Parser] @getNextToken | Current Token before: Type=1, Start=main, Length=4
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 15, Column: 22)
[Lexer] Symbol token created: (
[Parser] @getNextToken | Next Token after: Type=143, Start=(, Length=1
[Parser] Parsing parameter list...

<*> [Parser] Consuming token: TOKEN_LPAREN (Expecting: TOKEN_LPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=143, Start=(, Length=1
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 15, Column: 23)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1
[Parser DEBUG] Current Token: TOKEN_RPAREN, Lexeme: )

<!> [Parser] Parameter count: 0

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseParameterList>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: -> (Type: 21, Line: 15, Column: 26)
[Lexer] Symbol token created: ->
[Parser] @getNextToken | Next Token after: Type=21, Start=->, Length=2
[Parser DEBUG] Current Token: TOKEN_RESULT_ARROW, Lexeme: ->
[Parser] Found return type arrow
[Parser] @getNextToken | Current Token before: Type=21, Start=->, Length=2
[Lexer] Getting next token...
[Lexer] Checking data type: void
[Lexer] Created token: void (Type: 100, Line: 15, Column: 31)
[Lexer] Identifier token created: void
[Parser] @getNextToken | Next Token after: Type=100, Start=void, Length=4
[Parser] Parsing type...
[Parser] Getting data type for input: void
[Parser] @getNextToken | Current Token before: Type=100, Start=void, Length=4
[Lexer] Getting next token...
[Lexer] Created token: { (Type: 147, Line: 15, Column: 33)
[Lexer] Symbol token created: {
[Parser] @getNextToken | Next Token after: Type=147, Start={, Length=1
[Parser] Function return type: TYPE_VOID
[Parser] Parsing function block...
[AST] Creating Block Node
[AST_DEBUG] Creating node: 14
[AST] Created node of type: 14

[AST] Created Block Node

<*> [Parser] Consuming token: TOKEN_LBRACE (Expecting: TOKEN_LBRACE) @Fn <parseFunctionBlock>

[Parser] @getNextToken | Current Token before: Type=147, Start={, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: printInt
[Lexer] Created token: printInt (Type: 1, Line: 16, Column: 13)
[Lexer] Identifier token created: printInt
[Parser] @getNextToken | Next Token after: Type=1, Start=printInt, Length=8
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printInt
[Parser] Parsing statement...
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 16, Column: 14)
[Lexer] Symbol token created: (
[Parser] Parsing function call...
[AST_DEBUG] Creating node: 9
[AST] Created node of type: 9
[Parser] @getNextToken | Current Token before: Type=1, Start=printInt, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: qix
[Lexer] Created token: qix (Type: 1, Line: 16, Column: 17)
[Lexer] Identifier token created: qix
[Parser] @getNextToken | Next Token after: Type=1, Start=qix, Length=3

<!> 	[Parser] DEBUG: Current Token Type: TOKEN_IDENTIFIER
[Parser] Parsing arguments...
[Parser] @getNextToken | Current Token before: Type=1, Start=qix, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 16, Column: 18)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1


<#> [Parser] Creating argument node with expected type: TYPE_INT
<#> [Parser] Argument name: qix
[AST] Creating Arguments Node
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Arguments Node
[Parser] Adding argument to function call

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 16, Column: 19)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: printConstIntPtr
[Lexer] Created token: printConstIntPtr (Type: 1, Line: 17, Column: 21)
[Lexer] Identifier token created: printConstIntPtr
[Parser] @getNextToken | Next Token after: Type=1, Start=printConstIntPtr, Length=16
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printConstIntPtr
[Parser] Adding statement to function block
[AST] Block statement memory is sufficient
[AST] Final state: stmtCount = 1, stmtCapacity = 8
[Parser] Parsing statement...
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 17, Column: 22)
[Lexer] Symbol token created: (
[Parser] Parsing function call...
[AST_DEBUG] Creating node: 9
[AST] Created node of type: 9
[Parser] @getNextToken | Current Token before: Type=1, Start=printConstIntPtr, Length=16
[Lexer] Getting next token...
[Lexer] Checking data type: qix
[Lexer] Created token: qix (Type: 1, Line: 17, Column: 25)
[Lexer] Identifier token created: qix
[Parser] @getNextToken | Next Token after: Type=1, Start=qix, Length=3

<!> 	[Parser] DEBUG: Current Token Type: TOKEN_IDENTIFIER
[Parser] Parsing arguments...
[Parser] @getNextToken | Current Token before: Type=1, Start=qix, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 17, Column: 26)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1


<#> [Parser] Creating argument node with expected type: TYPE_INT
<#> [Parser] Argument name: qix
[AST] Creating Arguments Node
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Arguments Node
[Parser] Adding argument to function call

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 17, Column: 27)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: printIntPtr
[Lexer] Created token: printIntPtr (Type: 1, Line: 18, Column: 16)
[Lexer] Identifier token created: printIntPtr
[Parser] @getNextToken | Next Token after: Type=1, Start=printIntPtr, Length=11
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printIntPtr
[Parser] Adding statement to function block
[AST] Block statement memory is sufficient
[AST] Final state: stmtCount = 2, stmtCapacity = 8
[Parser] Parsing statement...
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 18, Column: 17)
[Lexer] Symbol token created: (
[Parser] Parsing function call...
[AST_DEBUG] Creating node: 9
[AST] Created node of type: 9
[Parser] @getNextToken | Current Token before: Type=1, Start=printIntPtr, Length=11
[Lexer] Getting next token...
[Lexer] Checking data type: qix
[Lexer] Created token: qix (Type: 1, Line: 18, Column: 20)
[Lexer] Identifier token created: qix
[Parser] @getNextToken | Next Token after: Type=1, Start=qix, Length=3

<!> 	[Parser] DEBUG: Current Token Type: TOKEN_IDENTIFIER
[Parser] Parsing arguments...
[Parser] @getNextToken | Current Token before: Type=1, Start=qix, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 18, Column: 21)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1


<#> [Parser] Creating argument node with expected type: TYPE_INT
<#> [Parser] Argument name: qix
[AST] Creating Arguments Node
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Arguments Node
[Parser] Adding argument to function call

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 18, Column: 22)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: printStr
[Lexer] Created token: printStr (Type: 1, Line: 20, Column: 13)
[Lexer] Identifier token created: printStr
[Parser] @getNextToken | Next Token after: Type=1, Start=printStr, Length=8
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printStr
[Parser] Adding statement to function block
[AST] Block statement memory is sufficient
[AST] Final state: stmtCount = 3, stmtCapacity = 8
[Parser] Parsing statement...
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 20, Column: 14)
[Lexer] Symbol token created: (
[Parser] Parsing function call...
[AST_DEBUG] Creating node: 9
[AST] Created node of type: 9
[Parser] @getNextToken | Current Token before: Type=1, Start=printStr, Length=8
[Lexer] Getting next token...
[Lexer] Checking data type: foo
[Lexer] Created token: foo (Type: 1, Line: 20, Column: 17)
[Lexer] Identifier token created: foo
[Parser] @getNextToken | Next Token after: Type=1, Start=foo, Length=3

<!> 	[Parser] DEBUG: Current Token Type: TOKEN_IDENTIFIER
[Parser] Parsing arguments...
[Parser] @getNextToken | Current Token before: Type=1, Start=foo, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 20, Column: 18)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1


<#> [Parser] Creating argument node with expected type: TYPE_STRING
<#> [Parser] Argument name: foo
[AST] Creating Arguments Node
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Arguments Node
[Parser] Adding argument to function call

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 20, Column: 19)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: printConstStr
[Lexer] Created token: printConstStr (Type: 1, Line: 21, Column: 18)
[Lexer] Identifier token created: printConstStr
[Parser] @getNextToken | Next Token after: Type=1, Start=printConstStr, Length=13
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printConstStr
[Parser] Adding statement to function block
[AST] Block statement memory is sufficient
[AST] Final state: stmtCount = 4, stmtCapacity = 8
[Parser] Parsing statement...
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 21, Column: 19)
[Lexer] Symbol token created: (
[Parser] Parsing function call...
[AST_DEBUG] Creating node: 9
[AST] Created node of type: 9
[Parser] @getNextToken | Current Token before: Type=1, Start=printConstStr, Length=13
[Lexer] Getting next token...
[Lexer] Checking data type: foo
[Lexer] Created token: foo (Type: 1, Line: 21, Column: 22)
[Lexer] Identifier token created: foo
[Parser] @getNextToken | Next Token after: Type=1, Start=foo, Length=3

<!> 	[Parser] DEBUG: Current Token Type: TOKEN_IDENTIFIER
[Parser] Parsing arguments...
[Parser] @getNextToken | Current Token before: Type=1, Start=foo, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 21, Column: 23)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1


<#> [Parser] Creating argument node with expected type: TYPE_STRING
<#> [Parser] Argument name: foo
[AST] Creating Arguments Node
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Arguments Node
[Parser] Adding argument to function call

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 21, Column: 24)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: printStrU
[Lexer] Created token: printStrU (Type: 1, Line: 22, Column: 14)
[Lexer] Identifier token created: printStrU
[Parser] @getNextToken | Next Token after: Type=1, Start=printStrU, Length=9
[Parser DEBUG] Current Token: TOKEN_IDENTIFIER, Lexeme: printStrU
[Parser] Adding statement to function block
[AST] Block statement memory is sufficient
[AST] Final state: stmtCount = 5, stmtCapacity = 8
[Parser] Parsing statement...
[Lexer] Getting next token...
[Lexer] Created token: ( (Type: 143, Line: 22, Column: 15)
[Lexer] Symbol token created: (
[Parser] Parsing function call...
[AST_DEBUG] Creating node: 9
[AST] Created node of type: 9
[Parser] @getNextToken | Current Token before: Type=1, Start=printStrU, Length=9
[Lexer] Getting next token...
[Lexer] Checking data type: foo
[Lexer] Created token: foo (Type: 1, Line: 22, Column: 18)
[Lexer] Identifier token created: foo
[Parser] @getNextToken | Next Token after: Type=1, Start=foo, Length=3

<!> 	[Parser] DEBUG: Current Token Type: TOKEN_IDENTIFIER
[Parser] Parsing arguments...
[Parser] @getNextToken | Current Token before: Type=1, Start=foo, Length=3
[Lexer] Getting next token...
[Lexer] Created token: ) (Type: 144, Line: 22, Column: 19)
[Lexer] Symbol token created: )
[Parser] @getNextToken | Next Token after: Type=144, Start=), Length=1


<#> [Parser] Creating argument node with expected type: TYPE_STRING
<#> [Parser] Argument name: foo
[AST] Creating Arguments Node
[AST_DEBUG] Creating node: 2
[AST] Created node of type: 2
[AST] Created Arguments Node
[Parser] Adding argument to function call

<*> [Parser] Consuming token: TOKEN_RPAREN (Expecting: TOKEN_RPAREN) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=144, Start=), Length=1
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 22, Column: 20)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseFunctionCall>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Checking data type: return
[Lexer] Created token: return (Type: 61, Line: 24, Column: 11)
[Lexer] Identifier token created: return
[Parser] @getNextToken | Next Token after: Type=61, Start=return, Length=6
[Parser DEBUG] Current Token: TOKEN_KW_RETURN, Lexeme: return
[Parser] Adding statement to function block
[AST] Block statement memory is sufficient
[AST] Final state: stmtCount = 6, stmtCapacity = 8
[Parser] Parsing statement...
[Parser] Parsing return statement
[Parser] Parsing return statement...

<*> [Parser] Consuming token: TOKEN_KW_RETURN (Expecting: TOKEN_KW_RETURN) @Fn <parseReturnStatement>

[Parser] @getNextToken | Current Token before: Type=61, Start=return, Length=6
[Lexer] Getting next token...
[Lexer] Created token: ; (Type: 138, Line: 24, Column: 12)
[Lexer] Symbol token created: ;
[Parser] @getNextToken | Next Token after: Type=138, Start=;, Length=1
[Parser DEBUG] Current Token: TOKEN_SEMICOLON, Lexeme: ;

<*> [Parser] Consuming token: TOKEN_SEMICOLON (Expecting: TOKEN_SEMICOLON) @Fn <parseReturnStatement>

[Parser] @getNextToken | Current Token before: Type=138, Start=;, Length=1
[Lexer] Getting next token...
[Lexer] Created token: } (Type: 148, Line: 25, Column: 2)
[Lexer] Symbol token created: }
[Parser] @getNextToken | Next Token after: Type=148, Start=}, Length=1
[Parser DEBUG] Current Token: TOKEN_RBRACE, Lexeme: }
[AST] Creating Return Node
[AST_DEBUG] Creating node: 13
[AST] Created node of type: 13
[AST] Created Return Node
[AST] Created Return Node: Type = 13
[Parser] Adding statement to function block
[AST] Block statement memory is sufficient
[AST] Final state: stmtCount = 7, stmtCapacity = 8

<*> [Parser] Consuming token: TOKEN_RBRACE (Expecting: TOKEN_RBRACE) @Fn <parseFunctionBlock>

[Parser] @getNextToken | Current Token before: Type=148, Start=}, Length=1
[Lexer] Getting next token...
[Lexer] Created token:  (Type: 0, Line: 26, Column: 1)
[Parser] @getNextToken | Next Token after: Type=0, Start=, Length=0
[Parser DEBUG] Current Token: TOKEN_EOF, Lexeme: 
[Parser] Exiting function block
[AST] Creating Function Node: main
[AST_DEBUG] Creating node: 1
[AST] Created node of type: 1
[AST] Created Function Node: main
[Parser] Adding statement to program...
[AST] Before adding statement: stmtCount = 10, stmtCapacity = 16
[AST] After adding statement: stmtCount = 11, stmtCapacity = 16
Symbol added: main
[SymTable - Debug] Symbol count: 11
[SymTable - Debug] Scope depth: 0
[SymTable - Debug] Table capacity: 20

-------------------------------------------------------------------------------------------------
Symbol Table:

Name                 Type                 Val/RetType          Scope        Const       ArgCount

-------------------------------------------------------------------------------------------------
printInt             EXTERN_FUNCTION          void               0          false          1         
printConstIntPtr     EXTERN_FUNCTION          void               0          false          1         
printIntPtr          EXTERN_FUNCTION          void               0          false          1         
printStr             EXTERN_FUNCTION          void               0          false          1         
printConstStr        EXTERN_FUNCTION          void               0          false          1         
printStrU            EXTERN_FUNCTION          void               0          false          1         
qix                  VAR_DECLARATION          int                0          false          0         
foo                  VAR_DECLARATION          string             0          false          0         
arr                  VAR_DECLARATION          int[]              0          false          0         
strArr               VAR_DECLARATION          string[]           0          false          0         
main                 FUNCTION_DECLARATION     void               0          false          0         
-------------------------------------------------------------------------------------------------


>===------- AST Tree -------===<

Program Node with 11 statements (capacity: 16)
  Extern Function Node
Function Name: printInt
Function Return Type: TYPE_VOID
Function Visibility: <VISIBILITY UNKNOWN>
Function Parameters:
    Variable Declaration Node: value
Variable Name Node Type: TYPE_INT
Variable Reference: false
  Extern Function Node
Function Name: printConstIntPtr
Function Return Type: TYPE_VOID
Function Visibility: <VISIBILITY UNKNOWN>
Function Parameters:
    Variable Declaration Node: value
Variable Name Node Type: TYPE_INT
Variable Reference: false
  Extern Function Node
Function Name: printIntPtr
Function Return Type: TYPE_VOID
Function Visibility: <VISIBILITY UNKNOWN>
Function Parameters:
    Variable Declaration Node: value
Variable Name Node Type: TYPE_INT
Variable Reference: false
  Extern Function Node
Function Name: printStr
Function Return Type: TYPE_VOID
Function Visibility: <VISIBILITY UNKNOWN>
Function Parameters:
    Variable Declaration Node: value
Variable Name Node Type: TYPE_STRING
Variable Reference: false
  Extern Function Node
Function Name: printConstStr
Function Return Type: TYPE_VOID
Function Visibility: <VISIBILITY UNKNOWN>
Function Parameters:
    Variable Declaration Node: value
Variable Name Node Type: TYPE_STRING
Variable Reference: false
  Extern Function Node
Function Name: printStrU
Function Return Type: TYPE_VOID
Function Visibility: <VISIBILITY UNKNOWN>
Function Parameters:
    Variable Declaration Node: value
Variable Name Node Type: TYPE_STRING
Variable Reference: false
  Variable Declaration Node: qix
Variable Name Node Type: TYPE_INT
Variable Reference: false
    Integer Literal Node: 34
  Variable Declaration Node: foo
Variable Name Node Type: TYPE_STRING
Variable Reference: false
    String Literal Node: Hello, World!
  Variable Declaration Node: arr
Variable Name Node Type: TYPE_INT_ARRAY
Variable Reference: false
    Array Literal Node with 5 elements (capacity: 8)
      Integer Literal Node: 1
      Integer Literal Node: 2
      Integer Literal Node: 3
      Integer Literal Node: 4
      Integer Literal Node: 5
  Variable Declaration Node: strArr
Variable Name Node Type: TYPE_STRING_ARRAY
Variable Reference: false
    Array Literal Node with 3 elements (capacity: 8)
      String Literal Node: Hello
      String Literal Node: World
      String Literal Node: !
  Function Declaration Node name: main
Function Declaration Node returnType: TYPE_VOID
Function Declaration Node visibility: VISIBILITY_PUBLIC
Function Declaration Node params:
Function Declaration Node body:
    Block Node with 7 statements (capacity: 8)
      Function Call Node: printInt
        Variable Declaration Node: qix
Variable Name Node Type: TYPE_INT
Variable Reference: true
      Function Call Node: printConstIntPtr
        Variable Declaration Node: qix
Variable Name Node Type: TYPE_INT
Variable Reference: true
      Function Call Node: printIntPtr
        Variable Declaration Node: qix
Variable Name Node Type: TYPE_INT
Variable Reference: true
      Function Call Node: printStr
        Variable Declaration Node: foo
Variable Name Node Type: TYPE_STRING
Variable Reference: true
      Function Call Node: printConstStr
        Variable Declaration Node: foo
Variable Name Node Type: TYPE_STRING
Variable Reference: true
      Function Call Node: printStrU
        Variable Declaration Node: foo
Variable Name Node Type: TYPE_STRING
Variable Reference: true
      Return Statement Node

>===------- End Tree ------===<

[Main] Generating IR code...
>===------------- CPP Code Generation -------------===<

[CPP] Starting Code Generation...
[CPP] Root Node Initialized
[CPP.h] CryoSyntax Initialized
[CPP.h] CryoTypes Initialized
[CPP.h] CryoModules Initialized
[CPP.h] CodeGen constructor start
[CPP.h] CodeGen Initialized
[CPP.h] Module Initialized

Starting Code Generation...
Node Type: PROGRAM
Line: 0
Program Node
Statements Count: 11
Node Type: EXTERN_FUNCTION
Line: 0
Unknown Node Type
Node Type: EXTERN_FUNCTION
Line: 0
Unknown Node Type
Node Type: EXTERN_FUNCTION
Line: 0
Unknown Node Type
Node Type: EXTERN_FUNCTION
Line: 0
Unknown Node Type
Node Type: EXTERN_FUNCTION
Line: 0
Unknown Node Type
Node Type: EXTERN_FUNCTION
Line: 0
Unknown Node Type
Node Type: VAR_DECLARATION
Line: 0
Variable Declaration Node
Variable Name: qix
Data Type: TYPE_INT
Is Global: Yes
Is Reference: No
Scope Level: 0
Node Type: LITERAL_EXPR
Line: 0
Literal Expression Node
Data Type: TYPE_INT
Value: 34
Node Type: VAR_DECLARATION
Line: 0
Variable Declaration Node
Variable Name: foo
Data Type: TYPE_STRING
Is Global: Yes
Is Reference: No
Scope Level: 0
Node Type: STRING_LITERAL
Line: 0
String Literal Node
Value: Hello, World!
Node Type: VAR_DECLARATION
Line: 0
Variable Declaration Node
Variable Name: arr
Data Type: TYPE_INT_ARRAY
Is Global: Yes
Is Reference: No
Scope Level: 0
Node Type: ARRAY_LITERAL
Line: 0
Array Literal Node
Element Count: 5
Node Type: LITERAL_EXPR
Line: 0
Literal Expression Node
Data Type: TYPE_INT
Value: 1
Node Type: LITERAL_EXPR
Line: 0
Literal Expression Node
Data Type: TYPE_INT
Value: 2
Node Type: LITERAL_EXPR
Line: 0
Literal Expression Node
Data Type: TYPE_INT
Value: 3
Node Type: LITERAL_EXPR
Line: 0
Literal Expression Node
Data Type: TYPE_INT
Value: 4
Node Type: LITERAL_EXPR
Line: 0
Literal Expression Node
Data Type: TYPE_INT
Value: 5
Node Type: VAR_DECLARATION
Line: 0
Variable Declaration Node
Variable Name: strArr
Data Type: TYPE_STRING_ARRAY
Is Global: Yes
Is Reference: No
Scope Level: 0
Node Type: ARRAY_LITERAL
Line: 0
Array Literal Node
Element Count: 3
Node Type: STRING_LITERAL
Line: 0
String Literal Node
Value: Hello
Node Type: STRING_LITERAL
Line: 0
String Literal Node
Value: World
Node Type: STRING_LITERAL
Line: 0
String Literal Node
Value: !
Node Type: FUNCTION_DECLARATION
Line: 0
Function Declaration Node
Function Name: main
Return Type: TYPE_VOID
Parameter Count: 0
Node Type: BLOCK
Line: 0
Unknown Node Type

First Pass: Declaring all functions
[Types] Getting LLVM Type for TYPE_VOID
[Types] Returning void type
[Types] Getting LLVM Type for TYPE_VOID
[Types] Returning void type
[Types] Getting LLVM Type for TYPE_VOID
[Types] Returning void type
[Types] Getting LLVM Type for TYPE_VOID
[Types] Returning void type
[Types] Getting LLVM Type for TYPE_VOID
[Types] Returning void type
[Types] Getting LLVM Type for TYPE_VOID
[Types] Returning void type
[Schema] Non-Function Declaration in @declareFunctions. Skipping...
[Schema] Non-Function Declaration in @declareFunctions. Skipping...
[Schema] Non-Function Declaration in @declareFunctions. Skipping...
[Schema] Non-Function Declaration in @declareFunctions. Skipping...
[Types] Getting LLVM Type for TYPE_VOID
[Types] Returning void type
[Schema] Function Declarations Complete.
[CPP] Main function not found, creating default main function
[Functions] Main function already exists. Not creating default.

Second Pass: Generate code for the entire program
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_PROGRAM.
[Generation] Generating code for program
[Generation] Generating code for program statement 0
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_EXTERN_FUNCTION.
[Functions] Warning: Function printInt already exists in the module
[Generation] Moving to next statement
[Generation] Generating code for program statement 1
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_EXTERN_FUNCTION.
[Functions] Warning: Function printConstIntPtr already exists in the module
[Generation] Moving to next statement
[Generation] Generating code for program statement 2
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_EXTERN_FUNCTION.
[Functions] Warning: Function printIntPtr already exists in the module
[Generation] Moving to next statement
[Generation] Generating code for program statement 3
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_EXTERN_FUNCTION.
[Functions] Warning: Function printStr already exists in the module
[Generation] Moving to next statement
[Generation] Generating code for program statement 4
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_EXTERN_FUNCTION.
[Functions] Warning: Function printConstStr already exists in the module
[Generation] Moving to next statement
[Generation] Generating code for program statement 5
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_EXTERN_FUNCTION.
[Functions] Warning: Function printStrU already exists in the module
[Generation] Moving to next statement
[Generation] Generating code for program statement 6
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_VAR_DECLARATION.
[Types] Getting LLVM Type for TYPE_INT
[Types] Returning int type
[Expressions] Generating code for expression
Type: LITERAL_EXPR
[Expressions] Generating code for literal expression
[Expressions] Generating code for integer literal
[CPP] Generated variable declaration for: qix
[Generation] Moving to next statement
[Generation] Generating code for program statement 7
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_VAR_DECLARATION.
[Types] Getting LLVM Type for TYPE_STRING
[Types] Returning string type
[Expressions] Generating code for expression
Type: STRING_LITERAL
[CPP] Generating code for string literal
[CPP] Generated variable declaration for: foo
[Generation] Moving to next statement
[Generation] Generating code for program statement 8
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_VAR_DECLARATION.
[Types] Getting LLVM Type for TYPE_INT_ARRAY
[Types] Error: Unsupported type
Error: Unsupported variable type: TYPE_INT_ARRAY
[Generation] Moving to next statement
[Generation] Generating code for program statement 9
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_VAR_DECLARATION.
[Types] Getting LLVM Type for TYPE_STRING_ARRAY
[Types] Error: Unsupported type
Error: Unsupported variable type: TYPE_STRING_ARRAY
[Generation] Moving to next statement
[Generation] Generating code for program statement 10
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_FUNCTION_DECLARATION.
[Functions] Generating function main
[Functions] Set insert point for function main
[Types] Getting LLVM Type for TYPE_VOID
[Types] Returning void type
[CPP] Warning: Function main already exists in the module
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_FUNCTION_CALL.
[Functions] Generating call to function: printInt
[Expressions] Generating code for expression
Type: VAR_DECLARATION
[CPP] Generating code for variable declaration
[Types] Getting LLVM Type for TYPE_INT
[Types] Returning int type
[Functions] Generated function call to printInt
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_FUNCTION_CALL.
[Functions] Generating call to function: printConstIntPtr
[Expressions] Generating code for expression
Type: VAR_DECLARATION
[CPP] Generating code for variable declaration
[Types] Getting LLVM Type for TYPE_INT
[Types] Returning int type
[Functions] Generated function call to printConstIntPtr
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_FUNCTION_CALL.
[Functions] Generating call to function: printIntPtr
[Expressions] Generating code for expression
Type: VAR_DECLARATION
[CPP] Generating code for variable declaration
[Types] Getting LLVM Type for TYPE_INT
[Types] Returning int type
[Functions] Generated function call to printIntPtr
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_FUNCTION_CALL.
[Functions] Generating call to function: printStr
[Expressions] Generating code for expression
Type: VAR_DECLARATION
[CPP] Generating code for variable declaration
[Types] Getting LLVM Type for TYPE_STRING
[Types] Returning string type
[Functions] Generated function call to printStr
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_FUNCTION_CALL.
[Functions] Generating call to function: printConstStr
[Expressions] Generating code for expression
Type: VAR_DECLARATION
[CPP] Generating code for variable declaration
[Types] Getting LLVM Type for TYPE_STRING
[Types] Returning string type
[Functions] Generated function call to printConstStr
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_FUNCTION_CALL.
[Functions] Generating call to function: printStrU
[Expressions] Generating code for expression
Type: VAR_DECLARATION
[CPP] Generating code for variable declaration
[Types] Getting LLVM Type for TYPE_STRING
[Types] Returning string type
[Functions] Generated function call to printStrU
[CodeGen] Starting Code Generation...
[CodeGen] Identified NODE_RETURN_STATEMENT.
[Generation] Moving to next statement
Global variable initializer type does not match global variable type!
ptr @foo

>===------- Error: LLVM module verification failed -------===<
; ModuleID = 'main'
source_filename = "main"

@qix = global i32 0
@foo = global i8 @.str
@.str = private constant [14 x i8] c"Hello, World!\00"

declare void @printInt(i32)

declare void @printConstIntPtr(ptr)

declare void @printIntPtr(ptr)

declare void @printStr(ptr)

declare void @printConstStr(ptr)

declare void @printStrU(ptr)

define void @main() {
entry:
  %qix = alloca i32, align 4
  %0 = load i32, ptr %qix, align 4
  call void @printInt(i32 %0)
  %qix1 = alloca i32, align 4
  call void @printConstIntPtr(ptr %qix1)
  %qix2 = alloca i32, align 4
  call void @printIntPtr(ptr %qix2)
  %foo = alloca i8, align 1
  call void @printStr(ptr %foo)
  %foo3 = alloca i8, align 1
  call void @printConstStr(ptr %foo3)
  %foo4 = alloca i8, align 1
  call void @printStrU(ptr %foo4)
  ret void
}

>===----------------- End Error -----------------===<
Error: LLVM module verification failed