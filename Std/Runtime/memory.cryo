namespace Memory;

extern function __c_memset(pointer: any, value: int, size: int) -> void;
extern function __c_malloc(size: int) -> any;
extern function __c_free(_pointer: any) -> void;
extern function __c_getAddr(_ptr_: any) -> i64;

extern function __c_printI64(i: i64) -> void;
extern function __c_I64ToHex(i: i64) -> string;
extern function __c_printStr(s: string) -> void;

struct Hex {
    hex: string;
    constructor(value: string) {
        this.hex = value;
    }
}

struct FreeBlock {
	size: int;
}

struct MemoryStack {
	buffer: int;
	size: int;
	top: int;
	// free_list: FreeBlock;
}

function __malloc__(size: int) -> any {
    return __c_malloc(size);
}

function __memset__(pointer: any, value: int, size: int) -> void {
    __c_memset(pointer, value, size);
    return;
}

function __free__(pointer: any) -> void {
    __c_free(pointer);
    return;
}

function __getAddr__(_ptr_: any) -> i64 {
    const ptr_addr: i64 = __c_getAddr(_ptr_);
    __c_printI64(ptr_addr);
    const hex_str: string = __c_I64ToHex(ptr_addr);
    const ptr_hex_struct: Hex = new Hex(__c_I64ToHex(ptr_addr));
    __c_printStr(ptr_hex_struct.hex);
    return ptr_addr;
}
