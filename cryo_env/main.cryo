//
//  ********************************
//  **            Cryo            **
//  **       Version: 0.0.1       **
//  ********************************
// 
//  This is a rough-draft of syntax documentation and basic lexical structure of Cryo.
//  As well as example code structure / syntax 
//  -----------------------------------------------------------------------------------

// #######################################################
// ## <1.0> Introduction to basic syntax and guidelines ##
// #######################################################


// ######################
// ## <1.1> - Comments ##
// ######################

// This is a single comment
/// TOKEN_SINGLE_COMMENT : 4 : `//`
/// `// <string>`


/*
    This is a multi-comment
*/
/// TOKEN_MULTI_COMMENT : 5 : `/* */`
/// TOKEN_MULTI_COMMENT_START : _UNIMPLEMENTED_ :   `/*`
/// TOKEN_MULTI_COMMENT_END : _UNIMPLEMENTED_   :   `*/`
/// `/* <string> */`

/**
 * This is a documentation comment.
*/
/// TOKEN_DOC_COMMENT : _UNIMPLEMENTED_ : `/**  **/` 
/// TOKEN_DOC_COMMENT : _UNIMPLEMENTED_ :   `/**`
/// TOKEN_MULTI_COMMENT_END : _UNIMPLEMENTED_   :   `**/`
/// `/** <string> **/`


// #################################
// ## <1.2> - Function Convention ##
// #################################
/**
 * Every Cryo project must have a main entry point to the program.
 * By default, every function is *private* and not viewable in the global scope.
 * The `main` function must be *public*. 
 *
 * Since functions by default are private to it's file, using the `private` keyword is unnecessary.
 * Writing it in will have no effect and is still valid syntax.
 * 
 * Breaking down the function signature:
 * ---------------------------------------------------------------
 * public fn main () -> Result<void> { ... };
 * 
 *
 * `public`     - Function visibility keyword.
 * `fn`         - Function identifier keyword.
 * `main`       - The Function label *required*.
 * `(a: int)`   - Parameters provided to the function.
 * `->`         - Return Type Identifier *required*.
 * `Result`     - The `Result` type safely handles return types.
 * `<void>`     - Result<T? | void, K? | Error>, type T = return value, K? = Custom Error Handling | Error
                  if type T is set <T, ...>, the default will be <T, Error?> unless K? is implemented.
 * ---------------------------------------------------------------
 *  
 * Another keyword for top-level function is the `unsafe` keyword.
 * There will be more information about this later on.
 * (p.s: `async` will be implemented in the future.)
 * --------------------------------------------------
 * public unsafe fn main () -> Result<void> { ... };
 * --------------------------------------------------
 *
**/

// Simple Function 
public fn main (a: int) -> Result<void> {
    return void;
}




// #########################
// ## <1.2> - Data Types  ##
// #########################

// Generic Types

/// TOKEN_KW_INT
const number: int = 10;

/// TOKEN_KW_STRING
const string: str = "Hello, world" | 'Foo Bar';

/// TOKEN_KW_BOOLEAN
const bool: boolean = true | false;

/// TOKEN_KW_ARRAY
const array: Array<int> = [1, 2, 3];

/// TOKEN_KW_VOID
fn foo() Result<void> {};





